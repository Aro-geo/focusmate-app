import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';

interface JournalEntry {
  id: string;
  title: string;
  content: string;
  mood?: string;
  tags?: string[];
  createdAt: Date;
  updatedAt: Date;
}

interface UserProfile {
  name: string;
  email: string;
  joinDate: Date;
  totalSessions?: number;
  totalFocusTime?: number;
  streakCount?: number;
}

class ExportService {
  /**
   * Export journal entries to PDF
   */
  async exportJournalToPDF(entries: JournalEntry[], userProfile: UserProfile): Promise<void> {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Helper function to add new page if needed
    const checkPageBreak = (requiredHeight: number) => {
      if (yPosition + requiredHeight > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
    };

    // Helper function to wrap text
    const wrapText = (text: string, maxWidth: number, fontSize: number = 12) => {
      doc.setFontSize(fontSize);
      return doc.splitTextToSize(text, maxWidth);
    };

    // Title
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.text('FocusMate AI - Journal Export', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 20;

    // User info
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Exported by: ${userProfile.name}`, margin, yPosition);
    yPosition += 10;
    doc.text(`Export Date: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 10;
    doc.text(`Total Entries: ${entries.length}`, margin, yPosition);
    yPosition += 20;

    // Entries
    entries.forEach((entry, index) => {
      checkPageBreak(60); // Minimum space needed for entry header

      // Entry header
      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      const title = entry.title || `Entry ${index + 1}`;
      doc.text(title, margin, yPosition);
      yPosition += 10;

      // Entry metadata
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const dateStr = entry.createdAt.toLocaleDateString();
      const timeStr = entry.createdAt.toLocaleTimeString();
      doc.text(`${dateStr} at ${timeStr}`, margin, yPosition);
      
      if (entry.mood) {
        doc.text(`Mood: ${entry.mood}`, margin + 100, yPosition);
      }
      yPosition += 8;

      if (entry.tags && entry.tags.length > 0) {
        doc.text(`Tags: ${entry.tags.join(', ')}`, margin, yPosition);
        yPosition += 8;
      }

      yPosition += 5;

      // Entry content
      doc.setFontSize(11);
      const contentLines = wrapText(entry.content, pageWidth - 2 * margin, 11);
      
      contentLines.forEach((line: string) => {
        checkPageBreak(8);
        doc.text(line, margin, yPosition);
        yPosition += 6;
      });

      yPosition += 15; // Space between entries

      // Add separator line
      if (index < entries.length - 1) {
        checkPageBreak(5);
        doc.setDrawColor(200, 200, 200);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 10;
      }
    });

    // Footer on last page
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text(
        `Generated by FocusMate AI - Page ${i} of ${totalPages}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }

    // Save the PDF
    const fileName = `FocusMate_Journal_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  }

  /**
   * Export journal entries to DOCX
   */
  async exportJournalToDOCX(entries: JournalEntry[], userProfile: UserProfile): Promise<void> {
    const children = [];

    // Title
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: 'FocusMate AI - Journal Export',
            bold: true,
            size: 32,
          }),
        ],
        heading: HeadingLevel.TITLE,
        alignment: 'center',
        spacing: { after: 400 },
      })
    );

    // User info
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: `Exported by: ${userProfile.name}`,
            size: 24,
          }),
        ],
        spacing: { after: 200 },
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Export Date: ${new Date().toLocaleDateString()}`,
            size: 24,
          }),
        ],
        spacing: { after: 200 },
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Total Entries: ${entries.length}`,
            size: 24,
          }),
        ],
        spacing: { after: 400 },
      })
    );

    // Entries
    entries.forEach((entry, index) => {
      // Entry title
      const title = entry.title || `Entry ${index + 1}`;
      children.push(
        new Paragraph({
          children: [
            new TextRun({
              text: title,
              bold: true,
              size: 28,
            }),
          ],
          heading: HeadingLevel.HEADING_1,
          spacing: { before: 400, after: 200 },
        })
      );

      // Entry metadata
      const dateStr = entry.createdAt.toLocaleDateString();
      const timeStr = entry.createdAt.toLocaleTimeString();
      let metadataText = `${dateStr} at ${timeStr}`;
      
      if (entry.mood) {
        metadataText += ` • Mood: ${entry.mood}`;
      }
      
      if (entry.tags && entry.tags.length > 0) {
        metadataText += ` • Tags: ${entry.tags.join(', ')}`;
      }

      children.push(
        new Paragraph({
          children: [
            new TextRun({
              text: metadataText,
              italics: true,
              size: 20,
              color: '666666',
            }),
          ],
          spacing: { after: 200 },
        })
      );

      // Entry content
      const contentParagraphs = entry.content.split('\n').filter(p => p.trim());
      contentParagraphs.forEach(paragraph => {
        children.push(
          new Paragraph({
            children: [
              new TextRun({
                text: paragraph,
                size: 24,
              }),
            ],
            spacing: { after: 200 },
          })
        );
      });

      // Add spacing between entries
      if (index < entries.length - 1) {
        children.push(
          new Paragraph({
            children: [new TextRun({ text: '', size: 24 })],
            spacing: { after: 400 },
          })
        );
      }
    });

    // Create document
    const doc = new Document({
      sections: [
        {
          properties: {},
          children,
        },
      ],
    });

    // Generate and save
    const buffer = await Packer.toBuffer(doc);
    const blob = new Blob([buffer], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    
    const fileName = `FocusMate_Journal_${new Date().toISOString().split('T')[0]}.docx`;
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  }

  /**
   * Export user profile data to PDF
   */
  async exportProfileToPDF(userProfile: UserProfile, additionalData?: any): Promise<void> {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    let yPosition = 30;

    // Title
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.text('FocusMate AI - Profile Export', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 30;

    // User Information
    doc.setFontSize(18);
    doc.text('User Information', 20, yPosition);
    yPosition += 15;

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Name: ${userProfile.name}`, 20, yPosition);
    yPosition += 10;
    doc.text(`Email: ${userProfile.email}`, 20, yPosition);
    yPosition += 10;
    doc.text(`Member Since: ${userProfile.joinDate.toLocaleDateString()}`, 20, yPosition);
    yPosition += 20;

    // Statistics
    if (userProfile.totalSessions || userProfile.totalFocusTime || userProfile.streakCount) {
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('Productivity Statistics', 20, yPosition);
      yPosition += 15;

      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      
      if (userProfile.totalSessions) {
        doc.text(`Total Focus Sessions: ${userProfile.totalSessions}`, 20, yPosition);
        yPosition += 10;
      }
      
      if (userProfile.totalFocusTime) {
        const hours = Math.floor(userProfile.totalFocusTime / 60);
        const minutes = userProfile.totalFocusTime % 60;
        doc.text(`Total Focus Time: ${hours}h ${minutes}m`, 20, yPosition);
        yPosition += 10;
      }
      
      if (userProfile.streakCount) {
        doc.text(`Current Streak: ${userProfile.streakCount} days`, 20, yPosition);
        yPosition += 10;
      }
    }

    // Export info
    yPosition += 20;
    doc.setFontSize(10);
    doc.text(`Exported on: ${new Date().toLocaleString()}`, 20, yPosition);
    doc.text('Generated by FocusMate AI', pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });

    // Save
    const fileName = `FocusMate_Profile_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  }
}

export const exportService = new ExportService();
export default exportService;