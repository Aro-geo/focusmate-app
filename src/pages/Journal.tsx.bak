import React, { useState, useEffect, useRef, ChangeEvent } from 'react';
import { 
  Calendar, 
  FileText, 
  Save, 
  Trash2, 
  PlusCircle, 
  Brain, 
  Search,
  Download,
  Lightbulb,
  Tag,
  X,
  Upload,
  Image
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTheme } from '../context/ThemeContext';
import FloatingAssistant from '../components/FloatingAssistant';
import SecureFirestoreService, { SecureJournalEntry } from '../services/SecureFirestoreService';
import JournalAIService from '../services/JournalAIService';
import JournalAttachmentService from '../services/JournalAttachmentService';
import { useAuth } from '../context/AuthContext';
import { Timestamp } from 'firebase/firestore';

// Define interfaces for the app
interface JournalStreak {
  current: number;
  longest: number;
  lastEntryDate: string;
}

interface JournalStats {
  totalEntries: number;
  moodCounts: Record<string, number>;
  tagCounts: Record<string, number>;
  averageSentiment: number;
  streak: JournalStreak;
  entriesByDate: Record<string, number>;
}

interface AIInsight {
  type: string;
  content: string;
  confidence?: number;
}

// Type for the user object to resolve TypeScript errors
interface AuthUser {
  uid: string;
  // Add other user properties as needed
}

const Journal: React.FC = () => {
  const { darkMode } = useTheme();
  const { user } = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const authUser = user as AuthUser; // Cast to our interface type

  // Mood emojis mapping
  const moodEmojis = {
    'excited': 'ü§©',
    'happy': 'üòä',
    'neutral': 'üòê',
    'tired': 'üò¥',
    'frustrated': 'üò§',
    'sad': 'üò¢',
    'productive': 'üí™',
    'creative': 'üé®',
    'reflective': 'ü§î',
    'grateful': 'üôè'
  };

  // Auto-suggestions
  const [autoSuggestions, setAutoSuggestions] = useState<string[]>([
    "What went well today?",
    "What could I improve tomorrow?",
    "What am I grateful for?",
    "What challenges did I face?",
    "What did I learn today?",
    "How did I feel during work sessions?",
    "What motivated me today?",
    "What distracted me the most?"
  ]);
  
  // Entry templates
  const entryTemplates = [
    {
      name: "Gratitude Journal",
      description: "Focus on things you're thankful for",
      template: "Today, I am grateful for:\n\n1. \n2. \n3. \n\nWhy these matter to me: "
    },
    {
      name: "Work Reflection",
      description: "Analyze your productivity and achievements",
      template: "Tasks completed today:\n\nChallenges faced:\n\nWhat I learned:\n\nPlan for tomorrow: "
    },
    {
      name: "Emotional Check-in",
      description: "Process your feelings and emotions",
      template: "My current mood: \n\nWhat contributed to this feeling: \n\nHow I want to feel tomorrow: \n\nOne step I can take: "
    },
    {
      name: "Problem-Solving",
      description: "Work through a challenge systematically",
      template: "Challenge I'm facing: \n\nPossible causes: \n\nPotential solutions: \n\n- \n- \n- \n\nNext steps: "
    }
  ];

  // State
  const [entries, setEntries] = useState<SecureJournalEntry[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [stats, setStats] = useState<JournalStats | null>(null);

  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);
  const [currentEntry, setCurrentEntry] = useState<string>('');
  const [currentTitle, setCurrentTitle] = useState<string>('');
  const [currentMood, setCurrentMood] = useState<string>('neutral');
  const [currentTags, setCurrentTags] = useState<string>('');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedMoodFilter, setSelectedMoodFilter] = useState<string>('all');
  const [selectedTagFilter, setSelectedTagFilter] = useState<string>('all');
  const [showCalendarFilter, setShowCalendarFilter] = useState<boolean>(false);
  const [aiInsight, setAiInsight] = useState<string>('');
  const [isGeneratingInsight, setIsGeneratingInsight] = useState<boolean>(false);
  const [currentAttachments, setCurrentAttachments] = useState<string[]>([]);
  const [isPrivateEntry, setIsPrivateEntry] = useState<boolean>(false);
  const [showEntryTemplates, setShowEntryTemplates] = useState<boolean>(false);
  const [uploadingFile, setUploadingFile] = useState<boolean>(false);
  const [fileError, setFileError] = useState<string | null>(null);
  
  // Streak tracking
  const [streak, setStreak] = useState<JournalStreak>({
    current: 0,
    longest: 0,
    lastEntryDate: ''
  });

  // AI Assistant state
  const [aiMessage, setAiMessage] = useState<string>("Ready to help you reflect on your thoughts and experiences! Ask me about journaling techniques or insights.");
  const [isAiLoading, setIsAiLoading] = useState<boolean>(false);
  const [aiChatInput, setAiChatInput] = useState<string>('');
  const [aiInsights, setAiInsights] = useState<any[]>([]);

  // Filtered entries
  const filteredEntries = entries.filter(entry => {
    const matchesSearch = entry.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        (entry.title?.toLowerCase().includes(searchTerm.toLowerCase())) ||
                        (entry.tags && entry.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())));
    const matchesMood = selectedMoodFilter === 'all' || entry.mood === selectedMoodFilter;
    const matchesTag = selectedTagFilter === 'all' || (entry.tags && entry.tags.includes(selectedTagFilter));
    
    return matchesSearch && matchesMood && matchesTag;
  });

  // Get unique tags for filter
  const allTags = Array.from(new Set(entries.flatMap(entry => entry.tags || [])));

  // Load journal entries and stats
  useEffect(() => {
    if (!authUser?.uid) return;
    
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get journal entries
        const journalEntries = await SecureFirestoreService.getJournalEntries(authUser.uid);
        setEntries(journalEntries);
        
        // Get journal stats
        const journalStats = await SecureFirestoreService.getJournalStats(authUser.uid);
        setStats(journalStats);
        setStreak(journalStats.streak);
        
        // Get AI insights
        if (journalEntries.length > 0) {
          const insights = await JournalAIService.analyzeJournalTrends(journalEntries);
          setAiInsights(insights);
          
          // Get personalized topic suggestions
          const suggestions = await JournalAIService.generateTopicSuggestions(journalEntries);
          setAutoSuggestions(suggestions);
        }
      } catch (err) {
        console.error('Error loading journal data:', err);
        setError('Failed to load journal entries. Please try again later.');
      } finally {
        setLoading(false);
      }
    };
    
    loadData();
  }, [authUser?.uid]);

  // Functions
  const handleSaveEntry = async () => {
    if (!authUser?.uid) {
      setError('You must be logged in to save entries.');
      return;
    }

    if (!currentEntry.trim()) {
      setError('Please write something before saving your entry.');
      return;
    }
    
    try {
      setSubmitting(true);
      setError(null);
      
      // Create the journal entry object
      const newEntry: Partial<SecureJournalEntry> = {
        title: currentTitle.trim() || `Entry ${new Date().toLocaleDateString()}`,
        content: currentEntry.trim(),
        mood: currentMood,
        tags: currentTags.split(',').map(tag => tag.trim()).filter(tag => tag !== ''),
        attachments: currentAttachments,
        isPrivate: isPrivateEntry,
        userId: authUser.uid
      };
      
      // Save to database
      const entryId = await SecureFirestoreService.addJournalEntry(newEntry, authUser.uid);
      
      // Analyze sentiment with AI
      const fullEntry = {
        ...newEntry,
        id: entryId
      } as SecureJournalEntry;
      
      await JournalAIService.updateJournalSentiment(fullEntry, authUser.uid);
      
      // Refresh entries
      const journalEntries = await SecureFirestoreService.getJournalEntries(authUser.uid);
      setEntries(journalEntries);
      
      // Update stats
      const journalStats = await SecureFirestoreService.getJournalStats(authUser.uid);
      setStats(journalStats);
      setStreak(journalStats.streak);
      
      // Reset form
      setCurrentEntry('');
      setCurrentTitle('');
      setCurrentMood('neutral');
      setCurrentTags('');
      setCurrentAttachments([]);
      setIsPrivateEntry(false);
      
      // Show success message
      alert('Journal entry saved successfully!');
    } catch (err) {
      console.error('Error saving journal entry:', err);
      setError('Failed to save your journal entry. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  // Simple sentiment analysis function (mock)
  const analyzeSentiment = (text: string): number => {
    // This is a simplified mock - in real app, use NLP API
    const positiveWords = ['happy', 'great', 'excellent', 'good', 'positive', 'excited', 'productive', 'success'];
    const negativeWords = ['sad', 'bad', 'difficult', 'hard', 'negative', 'frustrated', 'tired', 'fail'];
    
    let score = 0;
    const words = text.toLowerCase().split(/\W+/);
    
    words.forEach(word => {
      if (positiveWords.includes(word)) score += 0.2;
      if (negativeWords.includes(word)) score -= 0.2;
    });
    
    return Math.max(-1, Math.min(1, score)); // Clamp between -1 and 1
  };
  
  const getSentimentAnalysis = (score: number): string => {
    if (score > 0.5) return "Very positive entry! Your writing shows enthusiasm and optimism.";
    if (score > 0.2) return "Positive tone detected. You seem to be in a good mood.";
    if (score > -0.2) return "Neutral writing tone. You're being balanced and objective.";
    if (score > -0.5) return "Slightly negative tone. Consider reflection on what's troubling you.";
    return "Your entry seems quite negative. Consider writing about solutions or seeking support.";
  };
  
  const updateStreak = (entryDate: string) => {
    const today = new Date().toISOString().split('T')[0];
    const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0];
    
    if (entryDate === today) {
      // If last entry was yesterday, increment streak
      if (streak.lastEntryDate === yesterday) {
        const newCurrent = streak.current + 1;
        setStreak({
          current: newCurrent,
          longest: Math.max(newCurrent, streak.longest),
          lastEntryDate: today
        });
      } 
      // If streak broken but writing today
      else if (streak.lastEntryDate !== today) {
        setStreak({
          current: 1,
          longest: streak.longest,
          lastEntryDate: today
        });
      }
    }
  };

  // Delete entry
  const handleDeleteEntry = async (id: string) => {
    if (!authUser?.uid) {
      setError('You must be logged in to delete entries.');
      return;
    }

    if (!window.confirm('Are you sure you want to delete this journal entry? This action cannot be undone.')) {
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      // Get the entry to check for attachments
      const entryToDelete = entries.find(entry => entry.id === id);
      
      // Delete any attachments from storage
      if (entryToDelete?.attachments && entryToDelete.attachments.length > 0) {
        for (const attachmentUrl of entryToDelete.attachments) {
          try {
            await JournalAttachmentService.deleteImage(attachmentUrl, authUser.uid);
          } catch (err) {
            console.error('Error deleting attachment:', err);
            // Continue with entry deletion even if attachment deletion fails
          }
        }
      }
      
      // Delete the entry
      await SecureFirestoreService.deleteJournalEntry(id, authUser.uid);
      
      // Update local state
      setEntries(entries.filter(entry => entry.id !== id));
      
      // Update stats
      const journalStats = await SecureFirestoreService.getJournalStats(authUser.uid);
      setStats(journalStats);
      setStreak(journalStats.streak);
      
    } catch (err) {
      console.error('Error deleting journal entry:', err);
      setError('Failed to delete the journal entry. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Generate insights
  const handleGenerateInsight = async () => {
    if (!authUser?.uid || entries.length === 0) {
      setError('You need journal entries to generate insights.');
      return;
    }
    
    try {
      setIsGeneratingInsight(true);
      setError(null);
      
      // Use the AI service to analyze journal trends
      const insights = await JournalAIService.analyzeJournalTrends(entries);
      setAiInsights(insights);
      
      // Display a random insight as the main insight
      if (insights.length > 0) {
        const randomIndex = Math.floor(Math.random() * insights.length);
        setAiInsight(insights[randomIndex].content);
      } else {
        setAiInsight("Keep journaling! With more entries, I'll be able to provide deeper insights about your patterns and progress.");
      }
    } catch (err) {
      console.error('Error generating insights:', err);
      setError('Failed to generate insights. Please try again later.');
    } finally {
      setIsGeneratingInsight(false);
    }
  };

  // Export journal entries
  const handleExport = async () => {
    if (!authUser?.uid) {
      setError('You must be logged in to export entries.');
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      // Get all journal entries
      const allEntries = await SecureFirestoreService.exportJournalEntries(authUser.uid);
      
      // Format entries for export
      const exportData = allEntries.map(entry => ({
        title: entry.title,
        content: entry.content,
        mood: entry.mood,
        tags: entry.tags?.join(', ') || '',
        date: entry.createdAt.toDate().toISOString().split('T')[0],
        sentiment: entry.sentiment?.score || 'N/A',
        sentiment_analysis: entry.sentiment?.analysis || 'N/A'
      }));
      
      // Convert to JSON
      const jsonData = JSON.stringify(exportData, null, 2);
      
      // Create download link
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `journal_export_${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      alert('Journal exported successfully!');
    } catch (err) {
      console.error('Error exporting journal entries:', err);
      setError('Failed to export journal entries. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Add suggestion to entry
  const addSuggestionToEntry = (suggestion: string) => {
    const newContent = currentEntry ? `${currentEntry}\n\n${suggestion} ` : `${suggestion} `;
    setCurrentEntry(newContent);
  };
  
  // Apply template
  const applyTemplate = (template: string) => {
    if (currentEntry.trim() && !window.confirm("This will replace your current entry text. Continue?")) {
      return;
    }
    setCurrentEntry(template);
    setShowEntryTemplates(false);
  };
  
  // Handle file attachment
  const handleAttachment = () => {
    if (!authUser?.uid) {
      setError('You must be logged in to add attachments.');
      return;
    }
    
    // Create a file input and trigger it
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
  
  // Handle file selection
  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {
    if (!authUser?.uid) {
      setError('You must be logged in to add attachments.');
      return;
    }
    
    const file = e.target.files?.[0];
    if (!file) return;
    
    try {
      setUploadingFile(true);
      setFileError(null);
      
      // Check file size (limit to 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setFileError('File is too large. Maximum size is 5MB.');
        return;
      }
      
      // Upload file to storage
      const downloadUrl = await JournalAttachmentService.uploadImage(file, authUser.uid);
      
      // Add URL to attachments
      setCurrentAttachments([...currentAttachments, downloadUrl]);
      
    } catch (err) {
      console.error('Error uploading attachment:', err);
      setFileError('Failed to upload attachment. Please try again.');
    } finally {
      setUploadingFile(false);
      // Reset the file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };
  };

  // AI Assistant functions
  const handleAskAI = async () => {
    if (!aiChatInput.trim()) return;
    
    try {
      setIsAiLoading(true);
      setError(null);
      
      // Store the user's question for reference
      const userQuestion = aiChatInput;
      setAiChatInput('');
      
      // Define possible responses based on keywords in the question
      const responses = {
        journal: [
          "Regular journaling can help improve self-awareness and emotional regulation. Try to write consistently, even if just for a few minutes each day.",
          "Studies show that journaling can reduce stress and anxiety by helping process emotions and clarify thoughts.",
          "For effective journaling, try different formats - free writing, structured prompts, or gratitude lists to see what works best for you."
        ],
        mood: [
          "Tracking your mood over time can reveal patterns and triggers that affect your emotional state.",
          "Consider noting factors that influence your mood alongside your entries - sleep, exercise, nutrition, and social interactions often play a key role.",
          "Identifying mood patterns in your journal can help you make lifestyle adjustments to improve your overall wellbeing."
        ],
        productivity: [
          "Journaling about your work can help identify when and why you're most productive, allowing you to optimize your schedule.",
          "Try the 'Done List' technique - record completed tasks rather than just planning future ones. This builds momentum and motivation.",
          "Reflecting on your productive periods can help you replicate those conditions and improve your focus over time."
        ],
        default: [
          "I'm here to help with your journaling practice. Try asking about specific techniques or ways to get more insights from your entries.",
          "Regular reflection through journaling can lead to valuable personal insights and growth over time.",
          "Your journal is a safe space for self-expression. There's no right or wrong way to journal - find what works best for you."
        ]
      };
      
      // Determine which category the question falls into
      let category = 'default';
      if (userQuestion.toLowerCase().includes('journal')) category = 'journal';
      if (userQuestion.toLowerCase().includes('mood')) category = 'mood';
      if (userQuestion.toLowerCase().includes('productiv')) category = 'productivity';
      
      // Get a random response from the appropriate category
      const categoryResponses = responses[category as keyof typeof responses];
      const randomIndex = Math.floor(Math.random() * categoryResponses.length);
      
      // Simulate AI processing time
      setTimeout(() => {
        setAiMessage(categoryResponses[randomIndex]);
        setIsAiLoading(false);
      }, 1000);
      
    } catch (err) {
      console.error('Error with AI assistant:', err);
      setError('Failed to process your request. Please try again.');
      setIsAiLoading(false);
    }
  };

  const handleGetTip = async () => {
    try {
      setIsAiLoading(true);
      setError(null);
      
      const tips = [
        "üí° Tip: Try the 'Morning Pages' technique - write three pages of stream-of-consciousness thoughts each morning.",
        "‚ú® Insight: End each entry with one thing you're grateful for to boost positive emotions.",
        "üéØ Strategy: Use the STAR method (Situation, Task, Action, Result) to structure problem-solving entries.",
        "üå± Growth: Review your entries weekly to identify patterns and areas for improvement.",
        "üß† Technique: Try 'cognitive reframing' in your journal - rewrite negative situations from a more positive or neutral perspective.",
        "‚è±Ô∏è Productivity: The '2-Minute Rule' can help with journaling consistency - if it takes less than 2 minutes, do it now.",
        "üîÑ Reflection: Try the 'What? So What? Now What?' framework to deepen your reflections.",
        "üìä Progress: Track key metrics that matter to you (sleep, mood, energy) alongside your entries to spot correlations."
      ];
      
      // Simulate AI processing time
      setTimeout(() => {
        const randomIndex = Math.floor(Math.random() * tips.length);
        setAiMessage(tips[randomIndex]);
        setIsAiLoading(false);
      }, 800);
      
    } catch (err) {
      console.error('Error getting AI tip:', err);
      setError('Failed to retrieve a tip. Please try again.');
      setIsAiLoading(false);
    }
  };

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      darkMode 
        ? 'bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900' 
        : 'bg-gradient-to-br from-blue-50 via-white to-indigo-50'
    }`}>
      {/* Hidden file input for attachments */}
      <input 
        type="file" 
        ref={fileInputRef} 
        className="hidden" 
        accept="image/*" 
        onChange={handleFileChange}
      />
      
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8"
        >
          <div>
            <h1 className={`text-4xl font-bold mb-2 ${
              darkMode ? 'text-white' : 'text-gray-900'
            }`}>
              Reflection Journal
            </h1>
            <p className={`text-lg ${
              darkMode ? 'text-gray-300' : 'text-gray-600'
            }`}>
              Capture thoughts, track moods, and gain insights
            </p>
          </div>
          
          {/* Top-right actions */}
          <div className="flex items-center space-x-3 mt-4 lg:mt-0">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowCalendarFilter(!showCalendarFilter)}
              className={`flex items-center px-4 py-2 rounded-xl border transition-all ${
                darkMode
                  ? 'bg-gray-800 border-gray-700 text-gray-200 hover:bg-gray-700'
                  : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
              }`}
            >
              <Calendar className="w-4 h-4 mr-2" />
              Filter
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleExport}
              className={`flex items-center px-4 py-2 rounded-xl transition-all ${
                darkMode
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
            >
              <Download className="w-4 h-4 mr-2" />
              Export
            </motion.button>
          </div>
        </motion.div>

        {/* Loading State */}
        {loading && (
          <div className={`flex justify-center items-center p-8 rounded-2xl ${
            darkMode ? 'bg-gray-800/50 text-white' : 'bg-white/70 text-gray-800'
          }`}>
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mr-3"></div>
            <p>Loading your journal entries...</p>
          </div>
        )}

        {/* Error Message */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mb-6 relative">
            <span className="block sm:inline">{error}</span>
            <span className="absolute top-0 bottom-0 right-0 px-4 py-3" onClick={() => setError(null)}>
              <X className="h-6 w-6 text-red-500" />
            </span>
          </div>
        )}

        {/* Main Layout */}
        {!loading && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* Left Column - Entry List (2/3 width on desktop) */}
            <div className="lg:col-span-2 space-y-6">
              
              {/* Search and Filters */}
              <motion.div 
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className={`rounded-2xl p-6 ${
                  darkMode 
                    ? 'bg-gray-800/50 border border-gray-700' 
                    : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm'
                }`}
              >
                {/* Search Bar */}
                <div className="relative mb-4">
                  <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 ${
                    darkMode ? 'text-gray-400' : 'text-gray-500'
                  }`} />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search entries, tags, or content..."
                    className={`w-full pl-10 pr-4 py-3 rounded-xl border transition-all ${
                      darkMode
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500'
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500'
                    } focus:ring-2 focus:ring-blue-500/20 focus:outline-none`}
                  />
                </div>

                {/* Filter Pills */}
                <div className="flex flex-wrap gap-3">
                  {/* Mood Filter */}
                  <select
                    value={selectedMoodFilter}
                    onChange={(e) => setSelectedMoodFilter(e.target.value)}
                    title="Filter by mood"
                    className={`px-3 py-2 rounded-lg border text-sm ${
                      darkMode
                        ? 'bg-gray-700 border-gray-600 text-white'
                        : 'bg-white border-gray-300 text-gray-900'
                    }`}
                  >
                    <option value="all">All Moods</option>
                    {Object.keys(moodEmojis).map(mood => (
                      <option key={mood} value={mood}>
                        {moodEmojis[mood as keyof typeof moodEmojis]} {mood}
                      </option>
                    ))}
                  </select>

                  {/* Tag Filter */}
                  <select
                    value={selectedTagFilter}
                    onChange={(e) => setSelectedTagFilter(e.target.value)}
                    title="Filter by tag"
                    className={`px-3 py-2 rounded-lg border text-sm ${
                      darkMode
                        ? 'bg-gray-700 border-gray-600 text-white'
                        : 'bg-white border-gray-300 text-gray-900'
                    }`}
                  >
                    <option value="all">All Tags</option>
                    {allTags.map((tag: string) => (
                      <option key={tag} value={tag}>#{tag}</option>
                    ))}
                  </select>

                  {/* Clear Filters */}
                  {(searchTerm || selectedMoodFilter !== 'all' || selectedTagFilter !== 'all') && (
                    <button
                      onClick={() => {
                        setSearchTerm('');
                        setSelectedMoodFilter('all');
                        setSelectedTagFilter('all');
                      }}
                      className={`flex items-center px-3 py-2 rounded-lg text-sm transition-all ${
                        darkMode
                          ? 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
                      }`}
                    >
                      <X className="w-4 h-4 mr-1" />
                      Clear
                    </button>
                  )}
                </div>
              </motion.div>

              {/* Streak Stats */}
              <motion.div 
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.1 }}
                className={`rounded-2xl p-6 ${
                  darkMode 
                    ? 'bg-gray-800/50 border border-gray-700' 
                    : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm'
                }`}
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className={`text-lg font-semibold flex items-center ${
                    darkMode ? 'text-white' : 'text-gray-900'
                  }`}>
                    <TrendingUp className="w-5 h-5 mr-2" />
                    Journal Streak
                  </h3>
                </div>
                
                <div className="flex items-center justify-around">
                  <div className="text-center">
                    <div className={`text-3xl font-bold ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>
                      {streak?.current || 0}
                    </div>
                    <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                      Current Streak
                    </div>
                  </div>
                  
                  <div className="text-center">
                    <div className={`text-3xl font-bold ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                      {streak?.longest || 0}
                    </div>
                    <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                      Longest Streak
                    </div>
                  </div>
                  
                  <div className="text-center">
                    <div className={`text-3xl font-bold ${darkMode ? 'text-purple-400' : 'text-purple-600'}`}>
                      {stats?.totalEntries || 0}
                    </div>
                    <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                      Total Entries
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Entries List */}
              <div className="space-y-4">
                {filteredEntries.length === 0 && !loading && (
                  <div className={`p-6 rounded-2xl text-center ${
                    darkMode ? 'bg-gray-800/50 text-gray-300' : 'bg-white/70 text-gray-600'
                  }`}>
                    <FileText className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p className="text-lg mb-2">No journal entries found</p>
                    <p className="text-sm">
                      {searchTerm || selectedMoodFilter !== 'all' || selectedTagFilter !== 'all'
                        ? 'Try adjusting your filters to see more entries.'
                        : 'Create your first journal entry to start tracking your thoughts and moods.'}
                    </p>
                  </div>
                )}
                
                <AnimatePresence>
                  {filteredEntries.map((entry, index) => (
                    <motion.div
                      key={entry.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ delay: index * 0.1 }}
                      className={`rounded-2xl p-6 transition-all hover:shadow-lg ${
                        darkMode 
                          ? 'bg-gray-800/50 border border-gray-700 hover:bg-gray-800/70' 
                          : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm hover:bg-white/90'
                      } ${entry.isPrivate ? 'relative overflow-hidden' : ''}`}
                    >
                      {/* Privacy badge */}
                      {entry.isPrivate && (
                        <div className={`absolute top-0 right-0 px-3 py-1 text-xs rounded-bl-lg ${
                          darkMode ? 'bg-purple-900/60 text-purple-200' : 'bg-purple-100 text-purple-800'
                        }`}>
                          Private üîí
                        </div>
                      )}
                      
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <span className="text-2xl">{moodEmojis[entry.mood as keyof typeof moodEmojis]}</span>
                            <h3 className={`text-lg font-semibold ${
                              darkMode ? 'text-white' : 'text-gray-900'
                            }`}>
                              {entry.title}
                            </h3>
                          </div>
                          <div className="flex items-center justify-between mb-2">
                            <p className={`text-sm ${
                              darkMode ? 'text-gray-400' : 'text-gray-500'
                            }`}>
                              {entry.createdAt && new Date(entry.createdAt.toDate()).toLocaleDateString('en-US', { 
                                weekday: 'long', 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                              })}
                            </p>
                            
                            {/* Sentiment indicator */}
                            {entry.sentiment && (
                              <div className={`px-2 py-1 rounded-lg text-xs flex items-center ${
                                entry.sentiment.score > 0.3 
                                  ? (darkMode ? 'bg-green-900/30 text-green-300' : 'bg-green-50 text-green-800')
                                  : entry.sentiment.score < -0.3
                                    ? (darkMode ? 'bg-red-900/30 text-red-300' : 'bg-red-50 text-red-800')
                                    : (darkMode ? 'bg-blue-900/30 text-blue-300' : 'bg-blue-50 text-blue-800')
                              }`}>
                                {entry.sentiment.score > 0.3 
                                  ? 'üòä Positive' 
                                  : entry.sentiment.score < -0.3
                                    ? 'üòî Negative'
                                    : 'üòê Neutral'}
                              </div>
                            )}
                          </div>
                        </div>
                        <button
                          onClick={() => handleDeleteEntry(entry.id)}
                          title="Delete entry"
                          className={`p-2 rounded-lg transition-all ${
                            darkMode
                              ? 'text-gray-400 hover:text-red-400 hover:bg-gray-700'
                              : 'text-gray-400 hover:text-red-500 hover:bg-gray-100'
                          }`}
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                      
                      <p className={`mb-4 leading-relaxed ${
                        darkMode ? 'text-gray-300' : 'text-gray-700'
                      }`}>
                        {entry.content}
                      </p>
                      
                      {/* Attachments */}
                      {entry.attachments && entry.attachments.length > 0 && (
                        <div className="mb-4 flex flex-wrap gap-2">
                          {entry.attachments.map((url, imgIndex) => (
                            <div key={imgIndex} className="relative w-20 h-20 rounded-lg overflow-hidden">
                              <img src={url} alt="Attachment" className="w-full h-full object-cover" />
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {/* Tags */}
                      {entry.tags && entry.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {entry.tags.map((tag, tagIndex) => (
                            <span
                              key={tagIndex}
                              className={`px-3 py-1 rounded-full text-sm ${
                                darkMode
                                  ? 'bg-gray-700 text-gray-300'
                                  : 'bg-gray-100 text-gray-600'
                              }`}
                            >
                              #{tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </div>
          </div>
                              {entry.sentiment.score > 0.3 
                                ? 'üòä Positive' 
                                : entry.sentiment.score < -0.3
                                  ? 'üòî Negative'
                                  : 'üòê Neutral'}
                            </div>
                          )}
                        </div>
                      </div>
                      <button
                        onClick={() => handleDeleteEntry(entry.id)}
                        title="Delete entry"
                        className={`p-2 rounded-lg transition-all ${
                          darkMode
                            ? 'text-gray-400 hover:text-red-400 hover:bg-gray-700'
                            : 'text-gray-400 hover:text-red-500 hover:bg-gray-100'
                        }`}
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <p className={`mb-4 leading-relaxed ${
                      darkMode ? 'text-gray-300' : 'text-gray-700'
                    }`}>
                      {entry.content}
                    </p>
                    
                    {/* Attachments */}
                    {entry.attachments && entry.attachments.length > 0 && (
                      <div className="mb-4 flex flex-wrap gap-2">
                        {entry.attachments.map((url, imgIndex) => (
                          <div key={imgIndex} className="relative w-20 h-20 rounded-lg overflow-hidden">
                            <img src={url} alt="Attachment" className="w-full h-full object-cover" />
                          </div>
                        ))}
                      </div>
                    )}
                    
                    {/* Tags */}
                    {entry.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {entry.tags.map((tag, tagIndex) => (
                          <span
                            key={tagIndex}
                            className={`px-3 py-1 rounded-full text-sm ${
                              darkMode
                                ? 'bg-gray-700 text-gray-300'
                                : 'bg-gray-100 text-gray-600'
                            }`}
                          >
                            #{tag}
                          </span>
                        ))}
                      </div>
                    )}
                    
                    {/* Sentiment Analysis */}
                    {entry.sentiment && entry.sentiment.analysis && (
                      <div className={`mt-3 p-3 rounded-lg text-sm ${
                        darkMode ? 'bg-gray-700/50' : 'bg-gray-50'
                      }`}>
                        <div className={`text-xs uppercase tracking-wider mb-1 ${
                          darkMode ? 'text-gray-400' : 'text-gray-500'
                        }`}>
                          AI Analysis
                        </div>
                        <p className={darkMode ? 'text-gray-300' : 'text-gray-700'}>
                          {entry.sentiment.analysis}
                        </p>
                      </div>
                    )}
                  </motion.div>
                ))}
              </AnimatePresence>

              {filteredEntries.length === 0 && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className={`text-center py-12 rounded-2xl ${
                    darkMode 
                      ? 'bg-gray-800/50 border border-gray-700' 
                      : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm'
                  }`}
                >
                  <FileText className={`w-12 h-12 mx-auto mb-4 ${
                    darkMode ? 'text-gray-500' : 'text-gray-400'
                  }`} />
                  <p className={`text-lg ${
                    darkMode ? 'text-gray-400' : 'text-gray-500'
                  }`}>
                    No entries found. Start writing to capture your thoughts!
                  </p>
                </motion.div>
              )}
            </div>
          </div>

          {/* Right Column - Create Entry Form (1/3 width on desktop) */}
          <div className="space-y-6">
            
            {/* New Entry Form */}
            <motion.div 
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className={`rounded-2xl p-6 ${
                darkMode 
                  ? 'bg-gray-800/50 border border-gray-700' 
                  : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm'
              }`}
            >
              <h2 className={`text-xl font-semibold mb-6 flex items-center ${
                darkMode ? 'text-white' : 'text-gray-900'
              }`}>
                <PlusCircle className="w-5 h-5 mr-2" />
                New Entry
              </h2>

              {/* Date Picker + Streak */}
              <div className="flex justify-between items-center mb-4">
                <div className="flex-1">
                  <label className={`block text-sm font-medium mb-2 ${
                    darkMode ? 'text-gray-300' : 'text-gray-700'
                  }`}>
                    Date
                  </label>
                  <input
                    type="date"
                    value={selectedDate}
                    onChange={(e) => setSelectedDate(e.target.value)}
                    title="Select date for journal entry"
                    className={`w-full p-3 rounded-xl border transition-all ${
                      darkMode
                        ? 'bg-gray-700 border-gray-600 text-white'
                        : 'bg-white border-gray-300 text-gray-900'
                    } focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 focus:outline-none`}
                  />
                </div>
                
                {/* Streak indicator */}
                <div className={`ml-4 text-center rounded-xl px-4 py-2 ${
                  darkMode ? 'bg-indigo-900/30' : 'bg-indigo-50'
                }`}>
                  <div className={`text-sm font-medium ${
                    darkMode ? 'text-indigo-300' : 'text-indigo-700'
                  }`}>
                    Streak
                  </div>
                  <div className="flex items-center">
                    <span className={`text-2xl font-bold ${
                      darkMode ? 'text-indigo-400' : 'text-indigo-600'
                    }`}>
                      {streak.current}
                    </span>
                    <span className={`ml-1 text-xs ${
                      darkMode ? 'text-gray-400' : 'text-gray-500'
                    }`}>
                      days
                    </span>
                  </div>
                  <div className={`text-xs ${
                    darkMode ? 'text-gray-400' : 'text-gray-500'
                  }`}>
                    Best: {streak.longest}
                  </div>
                </div>
              </div>

              {/* Title Input */}
              <div className="mb-4">
                <label className={`block text-sm font-medium mb-2 ${
                  darkMode ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  Title (Optional)
                </label>
                <input
                  type="text"
                  value={currentTitle}
                  onChange={(e) => setCurrentTitle(e.target.value)}
                  placeholder="Give your entry a title..."
                  className={`w-full p-3 rounded-xl border transition-all ${
                    darkMode
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  } focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 focus:outline-none`}
                />
              </div>
              
              {/* Templates and Privacy Controls */}
              <div className="flex mb-4 gap-2">
                <button
                  onClick={() => setShowEntryTemplates(!showEntryTemplates)}
                  className={`flex items-center px-3 py-2 rounded-lg text-sm ${
                    darkMode
                      ? 'bg-indigo-700 hover:bg-indigo-600 text-white'
                      : 'bg-indigo-50 hover:bg-indigo-100 text-indigo-700'
                  }`}
                >
                  <FileText size={16} className="mr-2" />
                  Templates
                </button>
                
                <button
                  onClick={handleAttachment}
                  className={`flex items-center px-3 py-2 rounded-lg text-sm ${
                    darkMode
                      ? 'bg-gray-700 hover:bg-gray-600 text-white'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                  }`}
                >
                  <PlusCircle size={16} className="mr-2" />
                  Add Image
                </button>
                
                <button
                  onClick={() => setIsPrivateEntry(!isPrivateEntry)}
                  className={`flex items-center ml-auto px-3 py-2 rounded-lg text-sm ${
                    isPrivateEntry
                      ? (darkMode ? 'bg-purple-700 text-white' : 'bg-purple-100 text-purple-700')
                      : (darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700')
                  }`}
                >
                  {isPrivateEntry ? 'Private üîí' : 'Public üåê'}
                </button>
              </div>
              
              {/* Template dropdown */}
              <AnimatePresence>
                {showEntryTemplates && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className={`mb-4 overflow-hidden rounded-xl ${
                      darkMode ? 'bg-gray-700' : 'bg-gray-50'
                    }`}
                  >
                    <div className="p-3">
                      <h3 className={`text-sm font-medium mb-2 ${
                        darkMode ? 'text-gray-300' : 'text-gray-700'
                      }`}>
                        Select a Template
                      </h3>
                      <div className="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto">
                        {entryTemplates.map((template, index) => (
                          <button
                            key={index}
                            onClick={() => applyTemplate(template.template)}
                            className={`text-left p-3 rounded-lg text-sm transition-all ${
                              darkMode
                                ? 'bg-gray-600 hover:bg-gray-500'
                                : 'bg-white hover:bg-gray-100'
                            }`}
                          >
                            <div className={`font-medium mb-1 ${
                              darkMode ? 'text-white' : 'text-gray-800'
                            }`}>
                              {template.name}
                            </div>
                            <div className={`text-xs ${
                              darkMode ? 'text-gray-400' : 'text-gray-500'
                            }`}>
                              {template.description}
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
              
              {/* Attachments preview */}
              {currentAttachments.length > 0 && (
                <div className="mb-4 flex flex-wrap gap-2">
                  {currentAttachments.map((url, index) => (
                    <div 
                      key={index} 
                      className="relative w-16 h-16 rounded-lg overflow-hidden group"
                    >
                      <img src={url} alt="Attachment" className="w-full h-full object-cover" />
                      <button
                        onClick={() => setCurrentAttachments(currentAttachments.filter((_, i) => i !== index))}
                        aria-label="Remove attachment"
                        title="Remove attachment"
                        className={`absolute top-1 right-1 w-5 h-5 flex items-center justify-center rounded-full 
                        ${darkMode ? 'bg-gray-800/80' : 'bg-white/80'} opacity-0 group-hover:opacity-100 transition-opacity`}
                      >
                        <X size={12} />
                      </button>
                    </div>
                  ))}
                </div>
              )}

              {/* Mood Selection (Emoji) */}
              <div className="mb-4">
                <label className={`block text-sm font-medium mb-3 ${
                  darkMode ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  How are you feeling?
                </label>
                <div className="grid grid-cols-5 gap-2">
                  {Object.entries(moodEmojis).map(([mood, emoji]) => (
                    <button
                      key={mood}
                      onClick={() => setCurrentMood(mood)}
                      className={`p-3 rounded-xl text-2xl transition-all hover:scale-110 ${
                        currentMood === mood
                          ? (darkMode ? 'bg-blue-600 ring-2 ring-blue-400' : 'bg-blue-100 ring-2 ring-blue-500')
                          : (darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-50 hover:bg-gray-100')
                      }`}
                      title={mood}
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
                <p className={`text-xs mt-2 text-center capitalize ${
                  darkMode ? 'text-gray-400' : 'text-gray-500'
                }`}>
                  {currentMood}
                </p>
              </div>

              {/* Auto-suggestions */}
              <div className="mb-4">
                <label className={`block text-sm font-medium mb-3 ${
                  darkMode ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  <Lightbulb className="w-4 h-4 inline mr-1" />
                  Writing Prompts
                </label>
                <div className="grid grid-cols-1 gap-2 max-h-32 overflow-y-auto">
                  {autoSuggestions.map((suggestion, index) => (
                    <motion.button
                      key={index}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => addSuggestionToEntry(suggestion)}
                      className={`text-left p-2 rounded-lg text-sm transition-all ${
                        darkMode
                          ? 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                          : 'bg-gray-50 hover:bg-gray-100 text-gray-600'
                      }`}
                    >
                      {suggestion}
                    </motion.button>
                  ))}
                </div>
              </div>

              {/* Content Textarea */}
              <div className="mb-4">
                <label className={`block text-sm font-medium mb-2 ${
                  darkMode ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  Your thoughts *
                </label>
                <textarea
                  value={currentEntry}
                  onChange={(e) => setCurrentEntry(e.target.value)}
                  placeholder="What's on your mind today? Reflect on your experiences, challenges, achievements, or insights..."
                  rows={8}
                  className={`w-full p-3 rounded-xl border transition-all resize-none ${
                    darkMode
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  } focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 focus:outline-none`}
                />
                <div className={`text-xs mt-1 ${
                  darkMode ? 'text-gray-400' : 'text-gray-500'
                }`}>
                  {currentEntry.length} characters
                </div>
              </div>

              {/* Tags Input */}
              <div className="mb-6">
                <label className={`block text-sm font-medium mb-2 ${
                  darkMode ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  <Tag className="w-4 h-4 inline mr-1" />
                  Tags (comma-separated)
                </label>
                <input
                  type="text"
                  value={currentTags}
                  onChange={(e) => setCurrentTags(e.target.value)}
                  placeholder="productivity, learning, challenges, growth..."
                  className={`w-full p-3 rounded-xl border transition-all ${
                    darkMode
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  } focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 focus:outline-none`}
                />
              </div>

              {/* Save Button */}
              <motion.button
                whileHover={{ scale: currentEntry.trim() ? 1.02 : 1 }}
                whileTap={{ scale: currentEntry.trim() ? 0.98 : 1 }}
                onClick={handleSaveEntry}
                disabled={!currentEntry.trim()}
                className={`w-full py-3 rounded-xl font-medium transition-all ${
                  currentEntry.trim()
                    ? (darkMode 
                        ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-lg' 
                        : 'bg-blue-500 hover:bg-blue-600 text-white shadow-lg')
                    : (darkMode 
                        ? 'bg-gray-700 text-gray-500 cursor-not-allowed' 
                        : 'bg-gray-200 text-gray-400 cursor-not-allowed')
                }`}
              >
                <Save className="w-5 h-5 inline mr-2" />
                {currentEntry.trim() ? 'Save Entry' : 'Write something to save'}
              </motion.button>
            </motion.div>

            {/* AI Insights Card */}
            <motion.div 
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className={`rounded-2xl p-6 ${
                darkMode 
                  ? 'bg-gray-800/50 border border-gray-700' 
                  : 'bg-white/70 border border-white/20 shadow-lg backdrop-blur-sm'
              }`}
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className={`text-lg font-semibold flex items-center ${
                  darkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  <Brain className="w-5 h-5 mr-2" />
                  AI Insights & Recommendations
                </h3>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleGenerateInsight}
                  disabled={isGeneratingInsight}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    darkMode
                      ? 'bg-purple-600 hover:bg-purple-700 text-white disabled:bg-gray-700'
                      : 'bg-purple-500 hover:bg-purple-600 text-white disabled:bg-gray-300'
                  } disabled:cursor-not-allowed`}
                >
                  {isGeneratingInsight ? (
                    <div className="flex items-center">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Analyzing...
                    </div>
                  ) : (
                    'Generate Insights'
                  )}
                </motion.button>
              </div>

              {aiInsight ? (
                <div className={`rounded-xl overflow-hidden ${
                  darkMode ? 'bg-gray-700/50' : 'bg-purple-50'
                }`}>
                  <div className={`p-4 border-l-4 ${
                    darkMode ? 'border-purple-500' : 'border-purple-400'
                  }`}>
                    <div className={`text-xs uppercase tracking-wider mb-2 ${
                      darkMode ? 'text-purple-300' : 'text-purple-700'
                    }`}>
                      Journal Analysis
                    </div>
                    <p className={`leading-relaxed mb-3 ${
                      darkMode ? 'text-gray-300' : 'text-purple-900'
                    }`}>
                      {aiInsight}
                    </p>
                    
                    <div className={`mt-4 pt-4 border-t ${
                      darkMode ? 'border-gray-600' : 'border-purple-200'
                    }`}>
                      <div className={`text-xs uppercase tracking-wider mb-2 ${
                        darkMode ? 'text-purple-300' : 'text-purple-700'
                      }`}>
                        Weekly Goals
                      </div>
                      <ul className={`list-disc pl-5 ${
                        darkMode ? 'text-gray-300' : 'text-purple-900'
                      }`}>
                        <li>Journal at least 3 times this week to maintain your streak</li>
                        <li>Try adding mood tracking to entries when you feel {entries.length > 0 ? entries[0].mood : 'productive'}</li>
                        <li>Reflect on what influences your mood patterns</li>
                      </ul>
                    </div>
                  </div>
                </div>
              ) : (
                <div className={`p-4 rounded-xl ${
                  darkMode ? 'bg-gray-700/50' : 'bg-gray-50/80'
                }`}>
                  <p className={`text-sm mb-3 ${
                    darkMode ? 'text-gray-400' : 'text-gray-600'
                  }`}>
                    Get AI-powered insights about your journaling patterns, mood trends, and personal growth opportunities.
                  </p>
                  
                  <div className={`flex items-center p-3 rounded-lg ${
                    darkMode ? 'bg-gray-700' : 'bg-white'
                  }`}>
                    <div className={`mr-3 p-2 rounded-full ${
                      darkMode ? 'bg-purple-900/30 text-purple-300' : 'bg-purple-100 text-purple-700'
                    }`}>
                      <Brain size={20} />
                    </div>
                    <div>
                      <h4 className={`font-medium text-sm ${
                        darkMode ? 'text-white' : 'text-gray-900'
                      }`}>
                        How it works
                      </h4>
                      <p className={`text-xs mt-1 ${
                        darkMode ? 'text-gray-400' : 'text-gray-500'
                      }`}>
                        AI analyzes your entries to identify patterns in your writing, mood, and topics to provide personalized insights.
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </motion.div>
          </div>
        </div>
      </div>

      {/* Floating AI Assistant */}
      <FloatingAssistant
        isAiLoading={isAiLoading}
        aiMessage={aiMessage}
        aiChatInput={aiChatInput}
        setAiChatInput={setAiChatInput}
        onAskAI={handleAskAI}
        onGetTip={handleGetTip}
      />
    </div>
  );
};

export default Journal;

